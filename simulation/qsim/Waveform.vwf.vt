// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/06/2017 15:59:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sistemaComputacional
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sistemaComputacional_vlg_sample_tst(
	clock50,
	enter,
	entradaSwitch,
	reset,
	sampler_tx
);
input  clock50;
input  enter;
input [8:0] entradaSwitch;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock50 or enter or entradaSwitch or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sistemaComputacional_vlg_check_tst (
	dadoEscritaNovo,
	dadoRd,
	dadoRs,
	imediatoExtendido22,
	opcode,
	rd,
	saidaCentena,
	saidaDezena,
	saidaDezenaOpcode,
	saidaNegativo,
	saidaUnidade,
	saidaUnidadeOpcode,
	sampler_rx
);
input [31:0] dadoEscritaNovo;
input [31:0] dadoRd;
input [31:0] dadoRs;
input [31:0] imediatoExtendido22;
input [4:0] opcode;
input [4:0] rd;
input [6:0] saidaCentena;
input [6:0] saidaDezena;
input [6:0] saidaDezenaOpcode;
input [6:0] saidaNegativo;
input [6:0] saidaUnidade;
input [6:0] saidaUnidadeOpcode;
input sampler_rx;

reg [31:0] dadoEscritaNovo_expected;
reg [31:0] dadoRd_expected;
reg [31:0] dadoRs_expected;
reg [31:0] imediatoExtendido22_expected;
reg [4:0] opcode_expected;
reg [4:0] rd_expected;
reg [6:0] saidaCentena_expected;
reg [6:0] saidaDezena_expected;
reg [6:0] saidaDezenaOpcode_expected;
reg [6:0] saidaNegativo_expected;
reg [6:0] saidaUnidade_expected;
reg [6:0] saidaUnidadeOpcode_expected;

reg [31:0] dadoEscritaNovo_prev;
reg [31:0] dadoRd_prev;
reg [31:0] dadoRs_prev;
reg [31:0] imediatoExtendido22_prev;
reg [4:0] opcode_prev;
reg [4:0] rd_prev;
reg [6:0] saidaCentena_prev;
reg [6:0] saidaDezena_prev;
reg [6:0] saidaDezenaOpcode_prev;
reg [6:0] saidaNegativo_prev;
reg [6:0] saidaUnidade_prev;
reg [6:0] saidaUnidadeOpcode_prev;

reg [31:0] dadoEscritaNovo_expected_prev;
reg [31:0] dadoRd_expected_prev;
reg [31:0] dadoRs_expected_prev;
reg [31:0] imediatoExtendido22_expected_prev;
reg [4:0] opcode_expected_prev;
reg [4:0] rd_expected_prev;
reg [6:0] saidaCentena_expected_prev;
reg [6:0] saidaDezena_expected_prev;
reg [6:0] saidaDezenaOpcode_expected_prev;
reg [6:0] saidaNegativo_expected_prev;
reg [6:0] saidaUnidade_expected_prev;
reg [6:0] saidaUnidadeOpcode_expected_prev;

reg [31:0] last_dadoEscritaNovo_exp;
reg [31:0] last_dadoRd_exp;
reg [31:0] last_dadoRs_exp;
reg [31:0] last_imediatoExtendido22_exp;
reg [4:0] last_opcode_exp;
reg [4:0] last_rd_exp;
reg [6:0] last_saidaCentena_exp;
reg [6:0] last_saidaDezena_exp;
reg [6:0] last_saidaDezenaOpcode_exp;
reg [6:0] last_saidaNegativo_exp;
reg [6:0] last_saidaUnidade_exp;
reg [6:0] last_saidaUnidadeOpcode_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	dadoEscritaNovo_prev = dadoEscritaNovo;
	dadoRd_prev = dadoRd;
	dadoRs_prev = dadoRs;
	imediatoExtendido22_prev = imediatoExtendido22;
	opcode_prev = opcode;
	rd_prev = rd;
	saidaCentena_prev = saidaCentena;
	saidaDezena_prev = saidaDezena;
	saidaDezenaOpcode_prev = saidaDezenaOpcode;
	saidaNegativo_prev = saidaNegativo;
	saidaUnidade_prev = saidaUnidade;
	saidaUnidadeOpcode_prev = saidaUnidadeOpcode;
end

// update expected /o prevs

always @(trigger)
begin
	dadoEscritaNovo_expected_prev = dadoEscritaNovo_expected;
	dadoRd_expected_prev = dadoRd_expected;
	dadoRs_expected_prev = dadoRs_expected;
	imediatoExtendido22_expected_prev = imediatoExtendido22_expected;
	opcode_expected_prev = opcode_expected;
	rd_expected_prev = rd_expected;
	saidaCentena_expected_prev = saidaCentena_expected;
	saidaDezena_expected_prev = saidaDezena_expected;
	saidaDezenaOpcode_expected_prev = saidaDezenaOpcode_expected;
	saidaNegativo_expected_prev = saidaNegativo_expected;
	saidaUnidade_expected_prev = saidaUnidade_expected;
	saidaUnidadeOpcode_expected_prev = saidaUnidadeOpcode_expected;
end


// expected dadoEscritaNovo[ 31 ]
initial
begin
	dadoEscritaNovo_expected[31] = 1'bX;
end 
// expected dadoEscritaNovo[ 30 ]
initial
begin
	dadoEscritaNovo_expected[30] = 1'bX;
end 
// expected dadoEscritaNovo[ 29 ]
initial
begin
	dadoEscritaNovo_expected[29] = 1'bX;
end 
// expected dadoEscritaNovo[ 28 ]
initial
begin
	dadoEscritaNovo_expected[28] = 1'bX;
end 
// expected dadoEscritaNovo[ 27 ]
initial
begin
	dadoEscritaNovo_expected[27] = 1'bX;
end 
// expected dadoEscritaNovo[ 26 ]
initial
begin
	dadoEscritaNovo_expected[26] = 1'bX;
end 
// expected dadoEscritaNovo[ 25 ]
initial
begin
	dadoEscritaNovo_expected[25] = 1'bX;
end 
// expected dadoEscritaNovo[ 24 ]
initial
begin
	dadoEscritaNovo_expected[24] = 1'bX;
end 
// expected dadoEscritaNovo[ 23 ]
initial
begin
	dadoEscritaNovo_expected[23] = 1'bX;
end 
// expected dadoEscritaNovo[ 22 ]
initial
begin
	dadoEscritaNovo_expected[22] = 1'bX;
end 
// expected dadoEscritaNovo[ 21 ]
initial
begin
	dadoEscritaNovo_expected[21] = 1'bX;
end 
// expected dadoEscritaNovo[ 20 ]
initial
begin
	dadoEscritaNovo_expected[20] = 1'bX;
end 
// expected dadoEscritaNovo[ 19 ]
initial
begin
	dadoEscritaNovo_expected[19] = 1'bX;
end 
// expected dadoEscritaNovo[ 18 ]
initial
begin
	dadoEscritaNovo_expected[18] = 1'bX;
end 
// expected dadoEscritaNovo[ 17 ]
initial
begin
	dadoEscritaNovo_expected[17] = 1'bX;
end 
// expected dadoEscritaNovo[ 16 ]
initial
begin
	dadoEscritaNovo_expected[16] = 1'bX;
end 
// expected dadoEscritaNovo[ 15 ]
initial
begin
	dadoEscritaNovo_expected[15] = 1'bX;
end 
// expected dadoEscritaNovo[ 14 ]
initial
begin
	dadoEscritaNovo_expected[14] = 1'bX;
end 
// expected dadoEscritaNovo[ 13 ]
initial
begin
	dadoEscritaNovo_expected[13] = 1'bX;
end 
// expected dadoEscritaNovo[ 12 ]
initial
begin
	dadoEscritaNovo_expected[12] = 1'bX;
end 
// expected dadoEscritaNovo[ 11 ]
initial
begin
	dadoEscritaNovo_expected[11] = 1'bX;
end 
// expected dadoEscritaNovo[ 10 ]
initial
begin
	dadoEscritaNovo_expected[10] = 1'bX;
end 
// expected dadoEscritaNovo[ 9 ]
initial
begin
	dadoEscritaNovo_expected[9] = 1'bX;
end 
// expected dadoEscritaNovo[ 8 ]
initial
begin
	dadoEscritaNovo_expected[8] = 1'bX;
end 
// expected dadoEscritaNovo[ 7 ]
initial
begin
	dadoEscritaNovo_expected[7] = 1'bX;
end 
// expected dadoEscritaNovo[ 6 ]
initial
begin
	dadoEscritaNovo_expected[6] = 1'bX;
end 
// expected dadoEscritaNovo[ 5 ]
initial
begin
	dadoEscritaNovo_expected[5] = 1'bX;
end 
// expected dadoEscritaNovo[ 4 ]
initial
begin
	dadoEscritaNovo_expected[4] = 1'bX;
end 
// expected dadoEscritaNovo[ 3 ]
initial
begin
	dadoEscritaNovo_expected[3] = 1'bX;
end 
// expected dadoEscritaNovo[ 2 ]
initial
begin
	dadoEscritaNovo_expected[2] = 1'bX;
end 
// expected dadoEscritaNovo[ 1 ]
initial
begin
	dadoEscritaNovo_expected[1] = 1'bX;
end 
// expected dadoEscritaNovo[ 0 ]
initial
begin
	dadoEscritaNovo_expected[0] = 1'bX;
end 
// expected dadoRd[ 31 ]
initial
begin
	dadoRd_expected[31] = 1'bX;
end 
// expected dadoRd[ 30 ]
initial
begin
	dadoRd_expected[30] = 1'bX;
end 
// expected dadoRd[ 29 ]
initial
begin
	dadoRd_expected[29] = 1'bX;
end 
// expected dadoRd[ 28 ]
initial
begin
	dadoRd_expected[28] = 1'bX;
end 
// expected dadoRd[ 27 ]
initial
begin
	dadoRd_expected[27] = 1'bX;
end 
// expected dadoRd[ 26 ]
initial
begin
	dadoRd_expected[26] = 1'bX;
end 
// expected dadoRd[ 25 ]
initial
begin
	dadoRd_expected[25] = 1'bX;
end 
// expected dadoRd[ 24 ]
initial
begin
	dadoRd_expected[24] = 1'bX;
end 
// expected dadoRd[ 23 ]
initial
begin
	dadoRd_expected[23] = 1'bX;
end 
// expected dadoRd[ 22 ]
initial
begin
	dadoRd_expected[22] = 1'bX;
end 
// expected dadoRd[ 21 ]
initial
begin
	dadoRd_expected[21] = 1'bX;
end 
// expected dadoRd[ 20 ]
initial
begin
	dadoRd_expected[20] = 1'bX;
end 
// expected dadoRd[ 19 ]
initial
begin
	dadoRd_expected[19] = 1'bX;
end 
// expected dadoRd[ 18 ]
initial
begin
	dadoRd_expected[18] = 1'bX;
end 
// expected dadoRd[ 17 ]
initial
begin
	dadoRd_expected[17] = 1'bX;
end 
// expected dadoRd[ 16 ]
initial
begin
	dadoRd_expected[16] = 1'bX;
end 
// expected dadoRd[ 15 ]
initial
begin
	dadoRd_expected[15] = 1'bX;
end 
// expected dadoRd[ 14 ]
initial
begin
	dadoRd_expected[14] = 1'bX;
end 
// expected dadoRd[ 13 ]
initial
begin
	dadoRd_expected[13] = 1'bX;
end 
// expected dadoRd[ 12 ]
initial
begin
	dadoRd_expected[12] = 1'bX;
end 
// expected dadoRd[ 11 ]
initial
begin
	dadoRd_expected[11] = 1'bX;
end 
// expected dadoRd[ 10 ]
initial
begin
	dadoRd_expected[10] = 1'bX;
end 
// expected dadoRd[ 9 ]
initial
begin
	dadoRd_expected[9] = 1'bX;
end 
// expected dadoRd[ 8 ]
initial
begin
	dadoRd_expected[8] = 1'bX;
end 
// expected dadoRd[ 7 ]
initial
begin
	dadoRd_expected[7] = 1'bX;
end 
// expected dadoRd[ 6 ]
initial
begin
	dadoRd_expected[6] = 1'bX;
end 
// expected dadoRd[ 5 ]
initial
begin
	dadoRd_expected[5] = 1'bX;
end 
// expected dadoRd[ 4 ]
initial
begin
	dadoRd_expected[4] = 1'bX;
end 
// expected dadoRd[ 3 ]
initial
begin
	dadoRd_expected[3] = 1'bX;
end 
// expected dadoRd[ 2 ]
initial
begin
	dadoRd_expected[2] = 1'bX;
end 
// expected dadoRd[ 1 ]
initial
begin
	dadoRd_expected[1] = 1'bX;
end 
// expected dadoRd[ 0 ]
initial
begin
	dadoRd_expected[0] = 1'bX;
end 
// expected dadoRs[ 31 ]
initial
begin
	dadoRs_expected[31] = 1'bX;
end 
// expected dadoRs[ 30 ]
initial
begin
	dadoRs_expected[30] = 1'bX;
end 
// expected dadoRs[ 29 ]
initial
begin
	dadoRs_expected[29] = 1'bX;
end 
// expected dadoRs[ 28 ]
initial
begin
	dadoRs_expected[28] = 1'bX;
end 
// expected dadoRs[ 27 ]
initial
begin
	dadoRs_expected[27] = 1'bX;
end 
// expected dadoRs[ 26 ]
initial
begin
	dadoRs_expected[26] = 1'bX;
end 
// expected dadoRs[ 25 ]
initial
begin
	dadoRs_expected[25] = 1'bX;
end 
// expected dadoRs[ 24 ]
initial
begin
	dadoRs_expected[24] = 1'bX;
end 
// expected dadoRs[ 23 ]
initial
begin
	dadoRs_expected[23] = 1'bX;
end 
// expected dadoRs[ 22 ]
initial
begin
	dadoRs_expected[22] = 1'bX;
end 
// expected dadoRs[ 21 ]
initial
begin
	dadoRs_expected[21] = 1'bX;
end 
// expected dadoRs[ 20 ]
initial
begin
	dadoRs_expected[20] = 1'bX;
end 
// expected dadoRs[ 19 ]
initial
begin
	dadoRs_expected[19] = 1'bX;
end 
// expected dadoRs[ 18 ]
initial
begin
	dadoRs_expected[18] = 1'bX;
end 
// expected dadoRs[ 17 ]
initial
begin
	dadoRs_expected[17] = 1'bX;
end 
// expected dadoRs[ 16 ]
initial
begin
	dadoRs_expected[16] = 1'bX;
end 
// expected dadoRs[ 15 ]
initial
begin
	dadoRs_expected[15] = 1'bX;
end 
// expected dadoRs[ 14 ]
initial
begin
	dadoRs_expected[14] = 1'bX;
end 
// expected dadoRs[ 13 ]
initial
begin
	dadoRs_expected[13] = 1'bX;
end 
// expected dadoRs[ 12 ]
initial
begin
	dadoRs_expected[12] = 1'bX;
end 
// expected dadoRs[ 11 ]
initial
begin
	dadoRs_expected[11] = 1'bX;
end 
// expected dadoRs[ 10 ]
initial
begin
	dadoRs_expected[10] = 1'bX;
end 
// expected dadoRs[ 9 ]
initial
begin
	dadoRs_expected[9] = 1'bX;
end 
// expected dadoRs[ 8 ]
initial
begin
	dadoRs_expected[8] = 1'bX;
end 
// expected dadoRs[ 7 ]
initial
begin
	dadoRs_expected[7] = 1'bX;
end 
// expected dadoRs[ 6 ]
initial
begin
	dadoRs_expected[6] = 1'bX;
end 
// expected dadoRs[ 5 ]
initial
begin
	dadoRs_expected[5] = 1'bX;
end 
// expected dadoRs[ 4 ]
initial
begin
	dadoRs_expected[4] = 1'bX;
end 
// expected dadoRs[ 3 ]
initial
begin
	dadoRs_expected[3] = 1'bX;
end 
// expected dadoRs[ 2 ]
initial
begin
	dadoRs_expected[2] = 1'bX;
end 
// expected dadoRs[ 1 ]
initial
begin
	dadoRs_expected[1] = 1'bX;
end 
// expected dadoRs[ 0 ]
initial
begin
	dadoRs_expected[0] = 1'bX;
end 
// expected imediatoExtendido22[ 31 ]
initial
begin
	imediatoExtendido22_expected[31] = 1'bX;
end 
// expected imediatoExtendido22[ 30 ]
initial
begin
	imediatoExtendido22_expected[30] = 1'bX;
end 
// expected imediatoExtendido22[ 29 ]
initial
begin
	imediatoExtendido22_expected[29] = 1'bX;
end 
// expected imediatoExtendido22[ 28 ]
initial
begin
	imediatoExtendido22_expected[28] = 1'bX;
end 
// expected imediatoExtendido22[ 27 ]
initial
begin
	imediatoExtendido22_expected[27] = 1'bX;
end 
// expected imediatoExtendido22[ 26 ]
initial
begin
	imediatoExtendido22_expected[26] = 1'bX;
end 
// expected imediatoExtendido22[ 25 ]
initial
begin
	imediatoExtendido22_expected[25] = 1'bX;
end 
// expected imediatoExtendido22[ 24 ]
initial
begin
	imediatoExtendido22_expected[24] = 1'bX;
end 
// expected imediatoExtendido22[ 23 ]
initial
begin
	imediatoExtendido22_expected[23] = 1'bX;
end 
// expected imediatoExtendido22[ 22 ]
initial
begin
	imediatoExtendido22_expected[22] = 1'bX;
end 
// expected imediatoExtendido22[ 21 ]
initial
begin
	imediatoExtendido22_expected[21] = 1'bX;
end 
// expected imediatoExtendido22[ 20 ]
initial
begin
	imediatoExtendido22_expected[20] = 1'bX;
end 
// expected imediatoExtendido22[ 19 ]
initial
begin
	imediatoExtendido22_expected[19] = 1'bX;
end 
// expected imediatoExtendido22[ 18 ]
initial
begin
	imediatoExtendido22_expected[18] = 1'bX;
end 
// expected imediatoExtendido22[ 17 ]
initial
begin
	imediatoExtendido22_expected[17] = 1'bX;
end 
// expected imediatoExtendido22[ 16 ]
initial
begin
	imediatoExtendido22_expected[16] = 1'bX;
end 
// expected imediatoExtendido22[ 15 ]
initial
begin
	imediatoExtendido22_expected[15] = 1'bX;
end 
// expected imediatoExtendido22[ 14 ]
initial
begin
	imediatoExtendido22_expected[14] = 1'bX;
end 
// expected imediatoExtendido22[ 13 ]
initial
begin
	imediatoExtendido22_expected[13] = 1'bX;
end 
// expected imediatoExtendido22[ 12 ]
initial
begin
	imediatoExtendido22_expected[12] = 1'bX;
end 
// expected imediatoExtendido22[ 11 ]
initial
begin
	imediatoExtendido22_expected[11] = 1'bX;
end 
// expected imediatoExtendido22[ 10 ]
initial
begin
	imediatoExtendido22_expected[10] = 1'bX;
end 
// expected imediatoExtendido22[ 9 ]
initial
begin
	imediatoExtendido22_expected[9] = 1'bX;
end 
// expected imediatoExtendido22[ 8 ]
initial
begin
	imediatoExtendido22_expected[8] = 1'bX;
end 
// expected imediatoExtendido22[ 7 ]
initial
begin
	imediatoExtendido22_expected[7] = 1'bX;
end 
// expected imediatoExtendido22[ 6 ]
initial
begin
	imediatoExtendido22_expected[6] = 1'bX;
end 
// expected imediatoExtendido22[ 5 ]
initial
begin
	imediatoExtendido22_expected[5] = 1'bX;
end 
// expected imediatoExtendido22[ 4 ]
initial
begin
	imediatoExtendido22_expected[4] = 1'bX;
end 
// expected imediatoExtendido22[ 3 ]
initial
begin
	imediatoExtendido22_expected[3] = 1'bX;
end 
// expected imediatoExtendido22[ 2 ]
initial
begin
	imediatoExtendido22_expected[2] = 1'bX;
end 
// expected imediatoExtendido22[ 1 ]
initial
begin
	imediatoExtendido22_expected[1] = 1'bX;
end 
// expected imediatoExtendido22[ 0 ]
initial
begin
	imediatoExtendido22_expected[0] = 1'bX;
end 
// expected opcode[ 4 ]
initial
begin
	opcode_expected[4] = 1'bX;
end 
// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// expected rd[ 4 ]
initial
begin
	rd_expected[4] = 1'bX;
end 
// expected rd[ 3 ]
initial
begin
	rd_expected[3] = 1'bX;
end 
// expected rd[ 2 ]
initial
begin
	rd_expected[2] = 1'bX;
end 
// expected rd[ 1 ]
initial
begin
	rd_expected[1] = 1'bX;
end 
// expected rd[ 0 ]
initial
begin
	rd_expected[0] = 1'bX;
end 
// expected saidaCentena[ 6 ]
initial
begin
	saidaCentena_expected[6] = 1'bX;
end 
// expected saidaCentena[ 5 ]
initial
begin
	saidaCentena_expected[5] = 1'bX;
end 
// expected saidaCentena[ 4 ]
initial
begin
	saidaCentena_expected[4] = 1'bX;
end 
// expected saidaCentena[ 3 ]
initial
begin
	saidaCentena_expected[3] = 1'bX;
end 
// expected saidaCentena[ 2 ]
initial
begin
	saidaCentena_expected[2] = 1'bX;
end 
// expected saidaCentena[ 1 ]
initial
begin
	saidaCentena_expected[1] = 1'bX;
end 
// expected saidaCentena[ 0 ]
initial
begin
	saidaCentena_expected[0] = 1'bX;
end 
// expected saidaDezena[ 6 ]
initial
begin
	saidaDezena_expected[6] = 1'bX;
end 
// expected saidaDezena[ 5 ]
initial
begin
	saidaDezena_expected[5] = 1'bX;
end 
// expected saidaDezena[ 4 ]
initial
begin
	saidaDezena_expected[4] = 1'bX;
end 
// expected saidaDezena[ 3 ]
initial
begin
	saidaDezena_expected[3] = 1'bX;
end 
// expected saidaDezena[ 2 ]
initial
begin
	saidaDezena_expected[2] = 1'bX;
end 
// expected saidaDezena[ 1 ]
initial
begin
	saidaDezena_expected[1] = 1'bX;
end 
// expected saidaDezena[ 0 ]
initial
begin
	saidaDezena_expected[0] = 1'bX;
end 
// expected saidaDezenaOpcode[ 6 ]
initial
begin
	saidaDezenaOpcode_expected[6] = 1'bX;
end 
// expected saidaDezenaOpcode[ 5 ]
initial
begin
	saidaDezenaOpcode_expected[5] = 1'bX;
end 
// expected saidaDezenaOpcode[ 4 ]
initial
begin
	saidaDezenaOpcode_expected[4] = 1'bX;
end 
// expected saidaDezenaOpcode[ 3 ]
initial
begin
	saidaDezenaOpcode_expected[3] = 1'bX;
end 
// expected saidaDezenaOpcode[ 2 ]
initial
begin
	saidaDezenaOpcode_expected[2] = 1'bX;
end 
// expected saidaDezenaOpcode[ 1 ]
initial
begin
	saidaDezenaOpcode_expected[1] = 1'bX;
end 
// expected saidaDezenaOpcode[ 0 ]
initial
begin
	saidaDezenaOpcode_expected[0] = 1'bX;
end 
// expected saidaNegativo[ 6 ]
initial
begin
	saidaNegativo_expected[6] = 1'bX;
end 
// expected saidaNegativo[ 5 ]
initial
begin
	saidaNegativo_expected[5] = 1'bX;
end 
// expected saidaNegativo[ 4 ]
initial
begin
	saidaNegativo_expected[4] = 1'bX;
end 
// expected saidaNegativo[ 3 ]
initial
begin
	saidaNegativo_expected[3] = 1'bX;
end 
// expected saidaNegativo[ 2 ]
initial
begin
	saidaNegativo_expected[2] = 1'bX;
end 
// expected saidaNegativo[ 1 ]
initial
begin
	saidaNegativo_expected[1] = 1'bX;
end 
// expected saidaNegativo[ 0 ]
initial
begin
	saidaNegativo_expected[0] = 1'bX;
end 
// expected saidaUnidade[ 6 ]
initial
begin
	saidaUnidade_expected[6] = 1'bX;
end 
// expected saidaUnidade[ 5 ]
initial
begin
	saidaUnidade_expected[5] = 1'bX;
end 
// expected saidaUnidade[ 4 ]
initial
begin
	saidaUnidade_expected[4] = 1'bX;
end 
// expected saidaUnidade[ 3 ]
initial
begin
	saidaUnidade_expected[3] = 1'bX;
end 
// expected saidaUnidade[ 2 ]
initial
begin
	saidaUnidade_expected[2] = 1'bX;
end 
// expected saidaUnidade[ 1 ]
initial
begin
	saidaUnidade_expected[1] = 1'bX;
end 
// expected saidaUnidade[ 0 ]
initial
begin
	saidaUnidade_expected[0] = 1'bX;
end 
// expected saidaUnidadeOpcode[ 6 ]
initial
begin
	saidaUnidadeOpcode_expected[6] = 1'bX;
end 
// expected saidaUnidadeOpcode[ 5 ]
initial
begin
	saidaUnidadeOpcode_expected[5] = 1'bX;
end 
// expected saidaUnidadeOpcode[ 4 ]
initial
begin
	saidaUnidadeOpcode_expected[4] = 1'bX;
end 
// expected saidaUnidadeOpcode[ 3 ]
initial
begin
	saidaUnidadeOpcode_expected[3] = 1'bX;
end 
// expected saidaUnidadeOpcode[ 2 ]
initial
begin
	saidaUnidadeOpcode_expected[2] = 1'bX;
end 
// expected saidaUnidadeOpcode[ 1 ]
initial
begin
	saidaUnidadeOpcode_expected[1] = 1'bX;
end 
// expected saidaUnidadeOpcode[ 0 ]
initial
begin
	saidaUnidadeOpcode_expected[0] = 1'bX;
end 
// generate trigger
always @(dadoEscritaNovo_expected or dadoEscritaNovo or dadoRd_expected or dadoRd or dadoRs_expected or dadoRs or imediatoExtendido22_expected or imediatoExtendido22 or opcode_expected or opcode or rd_expected or rd or saidaCentena_expected or saidaCentena or saidaDezena_expected or saidaDezena or saidaDezenaOpcode_expected or saidaDezenaOpcode or saidaNegativo_expected or saidaNegativo or saidaUnidade_expected or saidaUnidade or saidaUnidadeOpcode_expected or saidaUnidadeOpcode)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dadoEscritaNovo = %b | expected dadoRd = %b | expected dadoRs = %b | expected imediatoExtendido22 = %b | expected opcode = %b | expected rd = %b | expected saidaCentena = %b | expected saidaDezena = %b | expected saidaDezenaOpcode = %b | expected saidaNegativo = %b | expected saidaUnidade = %b | expected saidaUnidadeOpcode = %b | ",dadoEscritaNovo_expected_prev,dadoRd_expected_prev,dadoRs_expected_prev,imediatoExtendido22_expected_prev,opcode_expected_prev,rd_expected_prev,saidaCentena_expected_prev,saidaDezena_expected_prev,saidaDezenaOpcode_expected_prev,saidaNegativo_expected_prev,saidaUnidade_expected_prev,saidaUnidadeOpcode_expected_prev);
	$display("| real dadoEscritaNovo = %b | real dadoRd = %b | real dadoRs = %b | real imediatoExtendido22 = %b | real opcode = %b | real rd = %b | real saidaCentena = %b | real saidaDezena = %b | real saidaDezenaOpcode = %b | real saidaNegativo = %b | real saidaUnidade = %b | real saidaUnidadeOpcode = %b | ",dadoEscritaNovo_prev,dadoRd_prev,dadoRs_prev,imediatoExtendido22_prev,opcode_prev,rd_prev,saidaCentena_prev,saidaDezena_prev,saidaDezenaOpcode_prev,saidaNegativo_prev,saidaUnidade_prev,saidaUnidadeOpcode_prev);
`endif
	if (
		( dadoEscritaNovo_expected_prev[0] !== 1'bx ) && ( dadoEscritaNovo_prev[0] !== dadoEscritaNovo_expected_prev[0] )
		&& ((dadoEscritaNovo_expected_prev[0] !== last_dadoEscritaNovo_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[0] = dadoEscritaNovo_expected_prev[0];
	end
	if (
		( dadoEscritaNovo_expected_prev[1] !== 1'bx ) && ( dadoEscritaNovo_prev[1] !== dadoEscritaNovo_expected_prev[1] )
		&& ((dadoEscritaNovo_expected_prev[1] !== last_dadoEscritaNovo_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[1] = dadoEscritaNovo_expected_prev[1];
	end
	if (
		( dadoEscritaNovo_expected_prev[2] !== 1'bx ) && ( dadoEscritaNovo_prev[2] !== dadoEscritaNovo_expected_prev[2] )
		&& ((dadoEscritaNovo_expected_prev[2] !== last_dadoEscritaNovo_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[2] = dadoEscritaNovo_expected_prev[2];
	end
	if (
		( dadoEscritaNovo_expected_prev[3] !== 1'bx ) && ( dadoEscritaNovo_prev[3] !== dadoEscritaNovo_expected_prev[3] )
		&& ((dadoEscritaNovo_expected_prev[3] !== last_dadoEscritaNovo_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[3] = dadoEscritaNovo_expected_prev[3];
	end
	if (
		( dadoEscritaNovo_expected_prev[4] !== 1'bx ) && ( dadoEscritaNovo_prev[4] !== dadoEscritaNovo_expected_prev[4] )
		&& ((dadoEscritaNovo_expected_prev[4] !== last_dadoEscritaNovo_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[4] = dadoEscritaNovo_expected_prev[4];
	end
	if (
		( dadoEscritaNovo_expected_prev[5] !== 1'bx ) && ( dadoEscritaNovo_prev[5] !== dadoEscritaNovo_expected_prev[5] )
		&& ((dadoEscritaNovo_expected_prev[5] !== last_dadoEscritaNovo_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[5] = dadoEscritaNovo_expected_prev[5];
	end
	if (
		( dadoEscritaNovo_expected_prev[6] !== 1'bx ) && ( dadoEscritaNovo_prev[6] !== dadoEscritaNovo_expected_prev[6] )
		&& ((dadoEscritaNovo_expected_prev[6] !== last_dadoEscritaNovo_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[6] = dadoEscritaNovo_expected_prev[6];
	end
	if (
		( dadoEscritaNovo_expected_prev[7] !== 1'bx ) && ( dadoEscritaNovo_prev[7] !== dadoEscritaNovo_expected_prev[7] )
		&& ((dadoEscritaNovo_expected_prev[7] !== last_dadoEscritaNovo_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[7] = dadoEscritaNovo_expected_prev[7];
	end
	if (
		( dadoEscritaNovo_expected_prev[8] !== 1'bx ) && ( dadoEscritaNovo_prev[8] !== dadoEscritaNovo_expected_prev[8] )
		&& ((dadoEscritaNovo_expected_prev[8] !== last_dadoEscritaNovo_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[8] = dadoEscritaNovo_expected_prev[8];
	end
	if (
		( dadoEscritaNovo_expected_prev[9] !== 1'bx ) && ( dadoEscritaNovo_prev[9] !== dadoEscritaNovo_expected_prev[9] )
		&& ((dadoEscritaNovo_expected_prev[9] !== last_dadoEscritaNovo_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[9] = dadoEscritaNovo_expected_prev[9];
	end
	if (
		( dadoEscritaNovo_expected_prev[10] !== 1'bx ) && ( dadoEscritaNovo_prev[10] !== dadoEscritaNovo_expected_prev[10] )
		&& ((dadoEscritaNovo_expected_prev[10] !== last_dadoEscritaNovo_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[10] = dadoEscritaNovo_expected_prev[10];
	end
	if (
		( dadoEscritaNovo_expected_prev[11] !== 1'bx ) && ( dadoEscritaNovo_prev[11] !== dadoEscritaNovo_expected_prev[11] )
		&& ((dadoEscritaNovo_expected_prev[11] !== last_dadoEscritaNovo_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[11] = dadoEscritaNovo_expected_prev[11];
	end
	if (
		( dadoEscritaNovo_expected_prev[12] !== 1'bx ) && ( dadoEscritaNovo_prev[12] !== dadoEscritaNovo_expected_prev[12] )
		&& ((dadoEscritaNovo_expected_prev[12] !== last_dadoEscritaNovo_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[12] = dadoEscritaNovo_expected_prev[12];
	end
	if (
		( dadoEscritaNovo_expected_prev[13] !== 1'bx ) && ( dadoEscritaNovo_prev[13] !== dadoEscritaNovo_expected_prev[13] )
		&& ((dadoEscritaNovo_expected_prev[13] !== last_dadoEscritaNovo_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[13] = dadoEscritaNovo_expected_prev[13];
	end
	if (
		( dadoEscritaNovo_expected_prev[14] !== 1'bx ) && ( dadoEscritaNovo_prev[14] !== dadoEscritaNovo_expected_prev[14] )
		&& ((dadoEscritaNovo_expected_prev[14] !== last_dadoEscritaNovo_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[14] = dadoEscritaNovo_expected_prev[14];
	end
	if (
		( dadoEscritaNovo_expected_prev[15] !== 1'bx ) && ( dadoEscritaNovo_prev[15] !== dadoEscritaNovo_expected_prev[15] )
		&& ((dadoEscritaNovo_expected_prev[15] !== last_dadoEscritaNovo_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[15] = dadoEscritaNovo_expected_prev[15];
	end
	if (
		( dadoEscritaNovo_expected_prev[16] !== 1'bx ) && ( dadoEscritaNovo_prev[16] !== dadoEscritaNovo_expected_prev[16] )
		&& ((dadoEscritaNovo_expected_prev[16] !== last_dadoEscritaNovo_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[16] = dadoEscritaNovo_expected_prev[16];
	end
	if (
		( dadoEscritaNovo_expected_prev[17] !== 1'bx ) && ( dadoEscritaNovo_prev[17] !== dadoEscritaNovo_expected_prev[17] )
		&& ((dadoEscritaNovo_expected_prev[17] !== last_dadoEscritaNovo_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[17] = dadoEscritaNovo_expected_prev[17];
	end
	if (
		( dadoEscritaNovo_expected_prev[18] !== 1'bx ) && ( dadoEscritaNovo_prev[18] !== dadoEscritaNovo_expected_prev[18] )
		&& ((dadoEscritaNovo_expected_prev[18] !== last_dadoEscritaNovo_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[18] = dadoEscritaNovo_expected_prev[18];
	end
	if (
		( dadoEscritaNovo_expected_prev[19] !== 1'bx ) && ( dadoEscritaNovo_prev[19] !== dadoEscritaNovo_expected_prev[19] )
		&& ((dadoEscritaNovo_expected_prev[19] !== last_dadoEscritaNovo_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[19] = dadoEscritaNovo_expected_prev[19];
	end
	if (
		( dadoEscritaNovo_expected_prev[20] !== 1'bx ) && ( dadoEscritaNovo_prev[20] !== dadoEscritaNovo_expected_prev[20] )
		&& ((dadoEscritaNovo_expected_prev[20] !== last_dadoEscritaNovo_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[20] = dadoEscritaNovo_expected_prev[20];
	end
	if (
		( dadoEscritaNovo_expected_prev[21] !== 1'bx ) && ( dadoEscritaNovo_prev[21] !== dadoEscritaNovo_expected_prev[21] )
		&& ((dadoEscritaNovo_expected_prev[21] !== last_dadoEscritaNovo_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[21] = dadoEscritaNovo_expected_prev[21];
	end
	if (
		( dadoEscritaNovo_expected_prev[22] !== 1'bx ) && ( dadoEscritaNovo_prev[22] !== dadoEscritaNovo_expected_prev[22] )
		&& ((dadoEscritaNovo_expected_prev[22] !== last_dadoEscritaNovo_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[22] = dadoEscritaNovo_expected_prev[22];
	end
	if (
		( dadoEscritaNovo_expected_prev[23] !== 1'bx ) && ( dadoEscritaNovo_prev[23] !== dadoEscritaNovo_expected_prev[23] )
		&& ((dadoEscritaNovo_expected_prev[23] !== last_dadoEscritaNovo_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[23] = dadoEscritaNovo_expected_prev[23];
	end
	if (
		( dadoEscritaNovo_expected_prev[24] !== 1'bx ) && ( dadoEscritaNovo_prev[24] !== dadoEscritaNovo_expected_prev[24] )
		&& ((dadoEscritaNovo_expected_prev[24] !== last_dadoEscritaNovo_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[24] = dadoEscritaNovo_expected_prev[24];
	end
	if (
		( dadoEscritaNovo_expected_prev[25] !== 1'bx ) && ( dadoEscritaNovo_prev[25] !== dadoEscritaNovo_expected_prev[25] )
		&& ((dadoEscritaNovo_expected_prev[25] !== last_dadoEscritaNovo_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[25] = dadoEscritaNovo_expected_prev[25];
	end
	if (
		( dadoEscritaNovo_expected_prev[26] !== 1'bx ) && ( dadoEscritaNovo_prev[26] !== dadoEscritaNovo_expected_prev[26] )
		&& ((dadoEscritaNovo_expected_prev[26] !== last_dadoEscritaNovo_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[26] = dadoEscritaNovo_expected_prev[26];
	end
	if (
		( dadoEscritaNovo_expected_prev[27] !== 1'bx ) && ( dadoEscritaNovo_prev[27] !== dadoEscritaNovo_expected_prev[27] )
		&& ((dadoEscritaNovo_expected_prev[27] !== last_dadoEscritaNovo_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[27] = dadoEscritaNovo_expected_prev[27];
	end
	if (
		( dadoEscritaNovo_expected_prev[28] !== 1'bx ) && ( dadoEscritaNovo_prev[28] !== dadoEscritaNovo_expected_prev[28] )
		&& ((dadoEscritaNovo_expected_prev[28] !== last_dadoEscritaNovo_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[28] = dadoEscritaNovo_expected_prev[28];
	end
	if (
		( dadoEscritaNovo_expected_prev[29] !== 1'bx ) && ( dadoEscritaNovo_prev[29] !== dadoEscritaNovo_expected_prev[29] )
		&& ((dadoEscritaNovo_expected_prev[29] !== last_dadoEscritaNovo_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[29] = dadoEscritaNovo_expected_prev[29];
	end
	if (
		( dadoEscritaNovo_expected_prev[30] !== 1'bx ) && ( dadoEscritaNovo_prev[30] !== dadoEscritaNovo_expected_prev[30] )
		&& ((dadoEscritaNovo_expected_prev[30] !== last_dadoEscritaNovo_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[30] = dadoEscritaNovo_expected_prev[30];
	end
	if (
		( dadoEscritaNovo_expected_prev[31] !== 1'bx ) && ( dadoEscritaNovo_prev[31] !== dadoEscritaNovo_expected_prev[31] )
		&& ((dadoEscritaNovo_expected_prev[31] !== last_dadoEscritaNovo_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscritaNovo[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscritaNovo_expected_prev);
		$display ("     Real value = %b", dadoEscritaNovo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscritaNovo_exp[31] = dadoEscritaNovo_expected_prev[31];
	end
	if (
		( dadoRd_expected_prev[0] !== 1'bx ) && ( dadoRd_prev[0] !== dadoRd_expected_prev[0] )
		&& ((dadoRd_expected_prev[0] !== last_dadoRd_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[0] = dadoRd_expected_prev[0];
	end
	if (
		( dadoRd_expected_prev[1] !== 1'bx ) && ( dadoRd_prev[1] !== dadoRd_expected_prev[1] )
		&& ((dadoRd_expected_prev[1] !== last_dadoRd_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[1] = dadoRd_expected_prev[1];
	end
	if (
		( dadoRd_expected_prev[2] !== 1'bx ) && ( dadoRd_prev[2] !== dadoRd_expected_prev[2] )
		&& ((dadoRd_expected_prev[2] !== last_dadoRd_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[2] = dadoRd_expected_prev[2];
	end
	if (
		( dadoRd_expected_prev[3] !== 1'bx ) && ( dadoRd_prev[3] !== dadoRd_expected_prev[3] )
		&& ((dadoRd_expected_prev[3] !== last_dadoRd_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[3] = dadoRd_expected_prev[3];
	end
	if (
		( dadoRd_expected_prev[4] !== 1'bx ) && ( dadoRd_prev[4] !== dadoRd_expected_prev[4] )
		&& ((dadoRd_expected_prev[4] !== last_dadoRd_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[4] = dadoRd_expected_prev[4];
	end
	if (
		( dadoRd_expected_prev[5] !== 1'bx ) && ( dadoRd_prev[5] !== dadoRd_expected_prev[5] )
		&& ((dadoRd_expected_prev[5] !== last_dadoRd_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[5] = dadoRd_expected_prev[5];
	end
	if (
		( dadoRd_expected_prev[6] !== 1'bx ) && ( dadoRd_prev[6] !== dadoRd_expected_prev[6] )
		&& ((dadoRd_expected_prev[6] !== last_dadoRd_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[6] = dadoRd_expected_prev[6];
	end
	if (
		( dadoRd_expected_prev[7] !== 1'bx ) && ( dadoRd_prev[7] !== dadoRd_expected_prev[7] )
		&& ((dadoRd_expected_prev[7] !== last_dadoRd_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[7] = dadoRd_expected_prev[7];
	end
	if (
		( dadoRd_expected_prev[8] !== 1'bx ) && ( dadoRd_prev[8] !== dadoRd_expected_prev[8] )
		&& ((dadoRd_expected_prev[8] !== last_dadoRd_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[8] = dadoRd_expected_prev[8];
	end
	if (
		( dadoRd_expected_prev[9] !== 1'bx ) && ( dadoRd_prev[9] !== dadoRd_expected_prev[9] )
		&& ((dadoRd_expected_prev[9] !== last_dadoRd_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[9] = dadoRd_expected_prev[9];
	end
	if (
		( dadoRd_expected_prev[10] !== 1'bx ) && ( dadoRd_prev[10] !== dadoRd_expected_prev[10] )
		&& ((dadoRd_expected_prev[10] !== last_dadoRd_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[10] = dadoRd_expected_prev[10];
	end
	if (
		( dadoRd_expected_prev[11] !== 1'bx ) && ( dadoRd_prev[11] !== dadoRd_expected_prev[11] )
		&& ((dadoRd_expected_prev[11] !== last_dadoRd_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[11] = dadoRd_expected_prev[11];
	end
	if (
		( dadoRd_expected_prev[12] !== 1'bx ) && ( dadoRd_prev[12] !== dadoRd_expected_prev[12] )
		&& ((dadoRd_expected_prev[12] !== last_dadoRd_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[12] = dadoRd_expected_prev[12];
	end
	if (
		( dadoRd_expected_prev[13] !== 1'bx ) && ( dadoRd_prev[13] !== dadoRd_expected_prev[13] )
		&& ((dadoRd_expected_prev[13] !== last_dadoRd_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[13] = dadoRd_expected_prev[13];
	end
	if (
		( dadoRd_expected_prev[14] !== 1'bx ) && ( dadoRd_prev[14] !== dadoRd_expected_prev[14] )
		&& ((dadoRd_expected_prev[14] !== last_dadoRd_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[14] = dadoRd_expected_prev[14];
	end
	if (
		( dadoRd_expected_prev[15] !== 1'bx ) && ( dadoRd_prev[15] !== dadoRd_expected_prev[15] )
		&& ((dadoRd_expected_prev[15] !== last_dadoRd_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[15] = dadoRd_expected_prev[15];
	end
	if (
		( dadoRd_expected_prev[16] !== 1'bx ) && ( dadoRd_prev[16] !== dadoRd_expected_prev[16] )
		&& ((dadoRd_expected_prev[16] !== last_dadoRd_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[16] = dadoRd_expected_prev[16];
	end
	if (
		( dadoRd_expected_prev[17] !== 1'bx ) && ( dadoRd_prev[17] !== dadoRd_expected_prev[17] )
		&& ((dadoRd_expected_prev[17] !== last_dadoRd_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[17] = dadoRd_expected_prev[17];
	end
	if (
		( dadoRd_expected_prev[18] !== 1'bx ) && ( dadoRd_prev[18] !== dadoRd_expected_prev[18] )
		&& ((dadoRd_expected_prev[18] !== last_dadoRd_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[18] = dadoRd_expected_prev[18];
	end
	if (
		( dadoRd_expected_prev[19] !== 1'bx ) && ( dadoRd_prev[19] !== dadoRd_expected_prev[19] )
		&& ((dadoRd_expected_prev[19] !== last_dadoRd_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[19] = dadoRd_expected_prev[19];
	end
	if (
		( dadoRd_expected_prev[20] !== 1'bx ) && ( dadoRd_prev[20] !== dadoRd_expected_prev[20] )
		&& ((dadoRd_expected_prev[20] !== last_dadoRd_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[20] = dadoRd_expected_prev[20];
	end
	if (
		( dadoRd_expected_prev[21] !== 1'bx ) && ( dadoRd_prev[21] !== dadoRd_expected_prev[21] )
		&& ((dadoRd_expected_prev[21] !== last_dadoRd_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[21] = dadoRd_expected_prev[21];
	end
	if (
		( dadoRd_expected_prev[22] !== 1'bx ) && ( dadoRd_prev[22] !== dadoRd_expected_prev[22] )
		&& ((dadoRd_expected_prev[22] !== last_dadoRd_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[22] = dadoRd_expected_prev[22];
	end
	if (
		( dadoRd_expected_prev[23] !== 1'bx ) && ( dadoRd_prev[23] !== dadoRd_expected_prev[23] )
		&& ((dadoRd_expected_prev[23] !== last_dadoRd_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[23] = dadoRd_expected_prev[23];
	end
	if (
		( dadoRd_expected_prev[24] !== 1'bx ) && ( dadoRd_prev[24] !== dadoRd_expected_prev[24] )
		&& ((dadoRd_expected_prev[24] !== last_dadoRd_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[24] = dadoRd_expected_prev[24];
	end
	if (
		( dadoRd_expected_prev[25] !== 1'bx ) && ( dadoRd_prev[25] !== dadoRd_expected_prev[25] )
		&& ((dadoRd_expected_prev[25] !== last_dadoRd_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[25] = dadoRd_expected_prev[25];
	end
	if (
		( dadoRd_expected_prev[26] !== 1'bx ) && ( dadoRd_prev[26] !== dadoRd_expected_prev[26] )
		&& ((dadoRd_expected_prev[26] !== last_dadoRd_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[26] = dadoRd_expected_prev[26];
	end
	if (
		( dadoRd_expected_prev[27] !== 1'bx ) && ( dadoRd_prev[27] !== dadoRd_expected_prev[27] )
		&& ((dadoRd_expected_prev[27] !== last_dadoRd_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[27] = dadoRd_expected_prev[27];
	end
	if (
		( dadoRd_expected_prev[28] !== 1'bx ) && ( dadoRd_prev[28] !== dadoRd_expected_prev[28] )
		&& ((dadoRd_expected_prev[28] !== last_dadoRd_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[28] = dadoRd_expected_prev[28];
	end
	if (
		( dadoRd_expected_prev[29] !== 1'bx ) && ( dadoRd_prev[29] !== dadoRd_expected_prev[29] )
		&& ((dadoRd_expected_prev[29] !== last_dadoRd_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[29] = dadoRd_expected_prev[29];
	end
	if (
		( dadoRd_expected_prev[30] !== 1'bx ) && ( dadoRd_prev[30] !== dadoRd_expected_prev[30] )
		&& ((dadoRd_expected_prev[30] !== last_dadoRd_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[30] = dadoRd_expected_prev[30];
	end
	if (
		( dadoRd_expected_prev[31] !== 1'bx ) && ( dadoRd_prev[31] !== dadoRd_expected_prev[31] )
		&& ((dadoRd_expected_prev[31] !== last_dadoRd_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRd[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRd_expected_prev);
		$display ("     Real value = %b", dadoRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dadoRd_exp[31] = dadoRd_expected_prev[31];
	end
	if (
		( dadoRs_expected_prev[0] !== 1'bx ) && ( dadoRs_prev[0] !== dadoRs_expected_prev[0] )
		&& ((dadoRs_expected_prev[0] !== last_dadoRs_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[0] = dadoRs_expected_prev[0];
	end
	if (
		( dadoRs_expected_prev[1] !== 1'bx ) && ( dadoRs_prev[1] !== dadoRs_expected_prev[1] )
		&& ((dadoRs_expected_prev[1] !== last_dadoRs_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[1] = dadoRs_expected_prev[1];
	end
	if (
		( dadoRs_expected_prev[2] !== 1'bx ) && ( dadoRs_prev[2] !== dadoRs_expected_prev[2] )
		&& ((dadoRs_expected_prev[2] !== last_dadoRs_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[2] = dadoRs_expected_prev[2];
	end
	if (
		( dadoRs_expected_prev[3] !== 1'bx ) && ( dadoRs_prev[3] !== dadoRs_expected_prev[3] )
		&& ((dadoRs_expected_prev[3] !== last_dadoRs_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[3] = dadoRs_expected_prev[3];
	end
	if (
		( dadoRs_expected_prev[4] !== 1'bx ) && ( dadoRs_prev[4] !== dadoRs_expected_prev[4] )
		&& ((dadoRs_expected_prev[4] !== last_dadoRs_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[4] = dadoRs_expected_prev[4];
	end
	if (
		( dadoRs_expected_prev[5] !== 1'bx ) && ( dadoRs_prev[5] !== dadoRs_expected_prev[5] )
		&& ((dadoRs_expected_prev[5] !== last_dadoRs_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[5] = dadoRs_expected_prev[5];
	end
	if (
		( dadoRs_expected_prev[6] !== 1'bx ) && ( dadoRs_prev[6] !== dadoRs_expected_prev[6] )
		&& ((dadoRs_expected_prev[6] !== last_dadoRs_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[6] = dadoRs_expected_prev[6];
	end
	if (
		( dadoRs_expected_prev[7] !== 1'bx ) && ( dadoRs_prev[7] !== dadoRs_expected_prev[7] )
		&& ((dadoRs_expected_prev[7] !== last_dadoRs_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[7] = dadoRs_expected_prev[7];
	end
	if (
		( dadoRs_expected_prev[8] !== 1'bx ) && ( dadoRs_prev[8] !== dadoRs_expected_prev[8] )
		&& ((dadoRs_expected_prev[8] !== last_dadoRs_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[8] = dadoRs_expected_prev[8];
	end
	if (
		( dadoRs_expected_prev[9] !== 1'bx ) && ( dadoRs_prev[9] !== dadoRs_expected_prev[9] )
		&& ((dadoRs_expected_prev[9] !== last_dadoRs_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[9] = dadoRs_expected_prev[9];
	end
	if (
		( dadoRs_expected_prev[10] !== 1'bx ) && ( dadoRs_prev[10] !== dadoRs_expected_prev[10] )
		&& ((dadoRs_expected_prev[10] !== last_dadoRs_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[10] = dadoRs_expected_prev[10];
	end
	if (
		( dadoRs_expected_prev[11] !== 1'bx ) && ( dadoRs_prev[11] !== dadoRs_expected_prev[11] )
		&& ((dadoRs_expected_prev[11] !== last_dadoRs_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[11] = dadoRs_expected_prev[11];
	end
	if (
		( dadoRs_expected_prev[12] !== 1'bx ) && ( dadoRs_prev[12] !== dadoRs_expected_prev[12] )
		&& ((dadoRs_expected_prev[12] !== last_dadoRs_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[12] = dadoRs_expected_prev[12];
	end
	if (
		( dadoRs_expected_prev[13] !== 1'bx ) && ( dadoRs_prev[13] !== dadoRs_expected_prev[13] )
		&& ((dadoRs_expected_prev[13] !== last_dadoRs_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[13] = dadoRs_expected_prev[13];
	end
	if (
		( dadoRs_expected_prev[14] !== 1'bx ) && ( dadoRs_prev[14] !== dadoRs_expected_prev[14] )
		&& ((dadoRs_expected_prev[14] !== last_dadoRs_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[14] = dadoRs_expected_prev[14];
	end
	if (
		( dadoRs_expected_prev[15] !== 1'bx ) && ( dadoRs_prev[15] !== dadoRs_expected_prev[15] )
		&& ((dadoRs_expected_prev[15] !== last_dadoRs_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[15] = dadoRs_expected_prev[15];
	end
	if (
		( dadoRs_expected_prev[16] !== 1'bx ) && ( dadoRs_prev[16] !== dadoRs_expected_prev[16] )
		&& ((dadoRs_expected_prev[16] !== last_dadoRs_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[16] = dadoRs_expected_prev[16];
	end
	if (
		( dadoRs_expected_prev[17] !== 1'bx ) && ( dadoRs_prev[17] !== dadoRs_expected_prev[17] )
		&& ((dadoRs_expected_prev[17] !== last_dadoRs_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[17] = dadoRs_expected_prev[17];
	end
	if (
		( dadoRs_expected_prev[18] !== 1'bx ) && ( dadoRs_prev[18] !== dadoRs_expected_prev[18] )
		&& ((dadoRs_expected_prev[18] !== last_dadoRs_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[18] = dadoRs_expected_prev[18];
	end
	if (
		( dadoRs_expected_prev[19] !== 1'bx ) && ( dadoRs_prev[19] !== dadoRs_expected_prev[19] )
		&& ((dadoRs_expected_prev[19] !== last_dadoRs_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[19] = dadoRs_expected_prev[19];
	end
	if (
		( dadoRs_expected_prev[20] !== 1'bx ) && ( dadoRs_prev[20] !== dadoRs_expected_prev[20] )
		&& ((dadoRs_expected_prev[20] !== last_dadoRs_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[20] = dadoRs_expected_prev[20];
	end
	if (
		( dadoRs_expected_prev[21] !== 1'bx ) && ( dadoRs_prev[21] !== dadoRs_expected_prev[21] )
		&& ((dadoRs_expected_prev[21] !== last_dadoRs_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[21] = dadoRs_expected_prev[21];
	end
	if (
		( dadoRs_expected_prev[22] !== 1'bx ) && ( dadoRs_prev[22] !== dadoRs_expected_prev[22] )
		&& ((dadoRs_expected_prev[22] !== last_dadoRs_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[22] = dadoRs_expected_prev[22];
	end
	if (
		( dadoRs_expected_prev[23] !== 1'bx ) && ( dadoRs_prev[23] !== dadoRs_expected_prev[23] )
		&& ((dadoRs_expected_prev[23] !== last_dadoRs_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[23] = dadoRs_expected_prev[23];
	end
	if (
		( dadoRs_expected_prev[24] !== 1'bx ) && ( dadoRs_prev[24] !== dadoRs_expected_prev[24] )
		&& ((dadoRs_expected_prev[24] !== last_dadoRs_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[24] = dadoRs_expected_prev[24];
	end
	if (
		( dadoRs_expected_prev[25] !== 1'bx ) && ( dadoRs_prev[25] !== dadoRs_expected_prev[25] )
		&& ((dadoRs_expected_prev[25] !== last_dadoRs_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[25] = dadoRs_expected_prev[25];
	end
	if (
		( dadoRs_expected_prev[26] !== 1'bx ) && ( dadoRs_prev[26] !== dadoRs_expected_prev[26] )
		&& ((dadoRs_expected_prev[26] !== last_dadoRs_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[26] = dadoRs_expected_prev[26];
	end
	if (
		( dadoRs_expected_prev[27] !== 1'bx ) && ( dadoRs_prev[27] !== dadoRs_expected_prev[27] )
		&& ((dadoRs_expected_prev[27] !== last_dadoRs_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[27] = dadoRs_expected_prev[27];
	end
	if (
		( dadoRs_expected_prev[28] !== 1'bx ) && ( dadoRs_prev[28] !== dadoRs_expected_prev[28] )
		&& ((dadoRs_expected_prev[28] !== last_dadoRs_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[28] = dadoRs_expected_prev[28];
	end
	if (
		( dadoRs_expected_prev[29] !== 1'bx ) && ( dadoRs_prev[29] !== dadoRs_expected_prev[29] )
		&& ((dadoRs_expected_prev[29] !== last_dadoRs_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[29] = dadoRs_expected_prev[29];
	end
	if (
		( dadoRs_expected_prev[30] !== 1'bx ) && ( dadoRs_prev[30] !== dadoRs_expected_prev[30] )
		&& ((dadoRs_expected_prev[30] !== last_dadoRs_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[30] = dadoRs_expected_prev[30];
	end
	if (
		( dadoRs_expected_prev[31] !== 1'bx ) && ( dadoRs_prev[31] !== dadoRs_expected_prev[31] )
		&& ((dadoRs_expected_prev[31] !== last_dadoRs_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoRs[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoRs_expected_prev);
		$display ("     Real value = %b", dadoRs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dadoRs_exp[31] = dadoRs_expected_prev[31];
	end
	if (
		( imediatoExtendido22_expected_prev[0] !== 1'bx ) && ( imediatoExtendido22_prev[0] !== imediatoExtendido22_expected_prev[0] )
		&& ((imediatoExtendido22_expected_prev[0] !== last_imediatoExtendido22_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[0] = imediatoExtendido22_expected_prev[0];
	end
	if (
		( imediatoExtendido22_expected_prev[1] !== 1'bx ) && ( imediatoExtendido22_prev[1] !== imediatoExtendido22_expected_prev[1] )
		&& ((imediatoExtendido22_expected_prev[1] !== last_imediatoExtendido22_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[1] = imediatoExtendido22_expected_prev[1];
	end
	if (
		( imediatoExtendido22_expected_prev[2] !== 1'bx ) && ( imediatoExtendido22_prev[2] !== imediatoExtendido22_expected_prev[2] )
		&& ((imediatoExtendido22_expected_prev[2] !== last_imediatoExtendido22_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[2] = imediatoExtendido22_expected_prev[2];
	end
	if (
		( imediatoExtendido22_expected_prev[3] !== 1'bx ) && ( imediatoExtendido22_prev[3] !== imediatoExtendido22_expected_prev[3] )
		&& ((imediatoExtendido22_expected_prev[3] !== last_imediatoExtendido22_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[3] = imediatoExtendido22_expected_prev[3];
	end
	if (
		( imediatoExtendido22_expected_prev[4] !== 1'bx ) && ( imediatoExtendido22_prev[4] !== imediatoExtendido22_expected_prev[4] )
		&& ((imediatoExtendido22_expected_prev[4] !== last_imediatoExtendido22_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[4] = imediatoExtendido22_expected_prev[4];
	end
	if (
		( imediatoExtendido22_expected_prev[5] !== 1'bx ) && ( imediatoExtendido22_prev[5] !== imediatoExtendido22_expected_prev[5] )
		&& ((imediatoExtendido22_expected_prev[5] !== last_imediatoExtendido22_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[5] = imediatoExtendido22_expected_prev[5];
	end
	if (
		( imediatoExtendido22_expected_prev[6] !== 1'bx ) && ( imediatoExtendido22_prev[6] !== imediatoExtendido22_expected_prev[6] )
		&& ((imediatoExtendido22_expected_prev[6] !== last_imediatoExtendido22_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[6] = imediatoExtendido22_expected_prev[6];
	end
	if (
		( imediatoExtendido22_expected_prev[7] !== 1'bx ) && ( imediatoExtendido22_prev[7] !== imediatoExtendido22_expected_prev[7] )
		&& ((imediatoExtendido22_expected_prev[7] !== last_imediatoExtendido22_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[7] = imediatoExtendido22_expected_prev[7];
	end
	if (
		( imediatoExtendido22_expected_prev[8] !== 1'bx ) && ( imediatoExtendido22_prev[8] !== imediatoExtendido22_expected_prev[8] )
		&& ((imediatoExtendido22_expected_prev[8] !== last_imediatoExtendido22_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[8] = imediatoExtendido22_expected_prev[8];
	end
	if (
		( imediatoExtendido22_expected_prev[9] !== 1'bx ) && ( imediatoExtendido22_prev[9] !== imediatoExtendido22_expected_prev[9] )
		&& ((imediatoExtendido22_expected_prev[9] !== last_imediatoExtendido22_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[9] = imediatoExtendido22_expected_prev[9];
	end
	if (
		( imediatoExtendido22_expected_prev[10] !== 1'bx ) && ( imediatoExtendido22_prev[10] !== imediatoExtendido22_expected_prev[10] )
		&& ((imediatoExtendido22_expected_prev[10] !== last_imediatoExtendido22_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[10] = imediatoExtendido22_expected_prev[10];
	end
	if (
		( imediatoExtendido22_expected_prev[11] !== 1'bx ) && ( imediatoExtendido22_prev[11] !== imediatoExtendido22_expected_prev[11] )
		&& ((imediatoExtendido22_expected_prev[11] !== last_imediatoExtendido22_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[11] = imediatoExtendido22_expected_prev[11];
	end
	if (
		( imediatoExtendido22_expected_prev[12] !== 1'bx ) && ( imediatoExtendido22_prev[12] !== imediatoExtendido22_expected_prev[12] )
		&& ((imediatoExtendido22_expected_prev[12] !== last_imediatoExtendido22_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[12] = imediatoExtendido22_expected_prev[12];
	end
	if (
		( imediatoExtendido22_expected_prev[13] !== 1'bx ) && ( imediatoExtendido22_prev[13] !== imediatoExtendido22_expected_prev[13] )
		&& ((imediatoExtendido22_expected_prev[13] !== last_imediatoExtendido22_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[13] = imediatoExtendido22_expected_prev[13];
	end
	if (
		( imediatoExtendido22_expected_prev[14] !== 1'bx ) && ( imediatoExtendido22_prev[14] !== imediatoExtendido22_expected_prev[14] )
		&& ((imediatoExtendido22_expected_prev[14] !== last_imediatoExtendido22_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[14] = imediatoExtendido22_expected_prev[14];
	end
	if (
		( imediatoExtendido22_expected_prev[15] !== 1'bx ) && ( imediatoExtendido22_prev[15] !== imediatoExtendido22_expected_prev[15] )
		&& ((imediatoExtendido22_expected_prev[15] !== last_imediatoExtendido22_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[15] = imediatoExtendido22_expected_prev[15];
	end
	if (
		( imediatoExtendido22_expected_prev[16] !== 1'bx ) && ( imediatoExtendido22_prev[16] !== imediatoExtendido22_expected_prev[16] )
		&& ((imediatoExtendido22_expected_prev[16] !== last_imediatoExtendido22_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[16] = imediatoExtendido22_expected_prev[16];
	end
	if (
		( imediatoExtendido22_expected_prev[17] !== 1'bx ) && ( imediatoExtendido22_prev[17] !== imediatoExtendido22_expected_prev[17] )
		&& ((imediatoExtendido22_expected_prev[17] !== last_imediatoExtendido22_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[17] = imediatoExtendido22_expected_prev[17];
	end
	if (
		( imediatoExtendido22_expected_prev[18] !== 1'bx ) && ( imediatoExtendido22_prev[18] !== imediatoExtendido22_expected_prev[18] )
		&& ((imediatoExtendido22_expected_prev[18] !== last_imediatoExtendido22_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[18] = imediatoExtendido22_expected_prev[18];
	end
	if (
		( imediatoExtendido22_expected_prev[19] !== 1'bx ) && ( imediatoExtendido22_prev[19] !== imediatoExtendido22_expected_prev[19] )
		&& ((imediatoExtendido22_expected_prev[19] !== last_imediatoExtendido22_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[19] = imediatoExtendido22_expected_prev[19];
	end
	if (
		( imediatoExtendido22_expected_prev[20] !== 1'bx ) && ( imediatoExtendido22_prev[20] !== imediatoExtendido22_expected_prev[20] )
		&& ((imediatoExtendido22_expected_prev[20] !== last_imediatoExtendido22_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[20] = imediatoExtendido22_expected_prev[20];
	end
	if (
		( imediatoExtendido22_expected_prev[21] !== 1'bx ) && ( imediatoExtendido22_prev[21] !== imediatoExtendido22_expected_prev[21] )
		&& ((imediatoExtendido22_expected_prev[21] !== last_imediatoExtendido22_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[21] = imediatoExtendido22_expected_prev[21];
	end
	if (
		( imediatoExtendido22_expected_prev[22] !== 1'bx ) && ( imediatoExtendido22_prev[22] !== imediatoExtendido22_expected_prev[22] )
		&& ((imediatoExtendido22_expected_prev[22] !== last_imediatoExtendido22_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[22] = imediatoExtendido22_expected_prev[22];
	end
	if (
		( imediatoExtendido22_expected_prev[23] !== 1'bx ) && ( imediatoExtendido22_prev[23] !== imediatoExtendido22_expected_prev[23] )
		&& ((imediatoExtendido22_expected_prev[23] !== last_imediatoExtendido22_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[23] = imediatoExtendido22_expected_prev[23];
	end
	if (
		( imediatoExtendido22_expected_prev[24] !== 1'bx ) && ( imediatoExtendido22_prev[24] !== imediatoExtendido22_expected_prev[24] )
		&& ((imediatoExtendido22_expected_prev[24] !== last_imediatoExtendido22_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[24] = imediatoExtendido22_expected_prev[24];
	end
	if (
		( imediatoExtendido22_expected_prev[25] !== 1'bx ) && ( imediatoExtendido22_prev[25] !== imediatoExtendido22_expected_prev[25] )
		&& ((imediatoExtendido22_expected_prev[25] !== last_imediatoExtendido22_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[25] = imediatoExtendido22_expected_prev[25];
	end
	if (
		( imediatoExtendido22_expected_prev[26] !== 1'bx ) && ( imediatoExtendido22_prev[26] !== imediatoExtendido22_expected_prev[26] )
		&& ((imediatoExtendido22_expected_prev[26] !== last_imediatoExtendido22_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[26] = imediatoExtendido22_expected_prev[26];
	end
	if (
		( imediatoExtendido22_expected_prev[27] !== 1'bx ) && ( imediatoExtendido22_prev[27] !== imediatoExtendido22_expected_prev[27] )
		&& ((imediatoExtendido22_expected_prev[27] !== last_imediatoExtendido22_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[27] = imediatoExtendido22_expected_prev[27];
	end
	if (
		( imediatoExtendido22_expected_prev[28] !== 1'bx ) && ( imediatoExtendido22_prev[28] !== imediatoExtendido22_expected_prev[28] )
		&& ((imediatoExtendido22_expected_prev[28] !== last_imediatoExtendido22_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[28] = imediatoExtendido22_expected_prev[28];
	end
	if (
		( imediatoExtendido22_expected_prev[29] !== 1'bx ) && ( imediatoExtendido22_prev[29] !== imediatoExtendido22_expected_prev[29] )
		&& ((imediatoExtendido22_expected_prev[29] !== last_imediatoExtendido22_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[29] = imediatoExtendido22_expected_prev[29];
	end
	if (
		( imediatoExtendido22_expected_prev[30] !== 1'bx ) && ( imediatoExtendido22_prev[30] !== imediatoExtendido22_expected_prev[30] )
		&& ((imediatoExtendido22_expected_prev[30] !== last_imediatoExtendido22_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[30] = imediatoExtendido22_expected_prev[30];
	end
	if (
		( imediatoExtendido22_expected_prev[31] !== 1'bx ) && ( imediatoExtendido22_prev[31] !== imediatoExtendido22_expected_prev[31] )
		&& ((imediatoExtendido22_expected_prev[31] !== last_imediatoExtendido22_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imediatoExtendido22[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imediatoExtendido22_expected_prev);
		$display ("     Real value = %b", imediatoExtendido22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_imediatoExtendido22_exp[31] = imediatoExtendido22_expected_prev[31];
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( opcode_expected_prev[4] !== 1'bx ) && ( opcode_prev[4] !== opcode_expected_prev[4] )
		&& ((opcode_expected_prev[4] !== last_opcode_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[4] = opcode_expected_prev[4];
	end
	if (
		( rd_expected_prev[0] !== 1'bx ) && ( rd_prev[0] !== rd_expected_prev[0] )
		&& ((rd_expected_prev[0] !== last_rd_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rd_exp[0] = rd_expected_prev[0];
	end
	if (
		( rd_expected_prev[1] !== 1'bx ) && ( rd_prev[1] !== rd_expected_prev[1] )
		&& ((rd_expected_prev[1] !== last_rd_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rd_exp[1] = rd_expected_prev[1];
	end
	if (
		( rd_expected_prev[2] !== 1'bx ) && ( rd_prev[2] !== rd_expected_prev[2] )
		&& ((rd_expected_prev[2] !== last_rd_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rd_exp[2] = rd_expected_prev[2];
	end
	if (
		( rd_expected_prev[3] !== 1'bx ) && ( rd_prev[3] !== rd_expected_prev[3] )
		&& ((rd_expected_prev[3] !== last_rd_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rd_exp[3] = rd_expected_prev[3];
	end
	if (
		( rd_expected_prev[4] !== 1'bx ) && ( rd_prev[4] !== rd_expected_prev[4] )
		&& ((rd_expected_prev[4] !== last_rd_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_expected_prev);
		$display ("     Real value = %b", rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rd_exp[4] = rd_expected_prev[4];
	end
	if (
		( saidaCentena_expected_prev[0] !== 1'bx ) && ( saidaCentena_prev[0] !== saidaCentena_expected_prev[0] )
		&& ((saidaCentena_expected_prev[0] !== last_saidaCentena_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaCentena[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaCentena_expected_prev);
		$display ("     Real value = %b", saidaCentena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaCentena_exp[0] = saidaCentena_expected_prev[0];
	end
	if (
		( saidaCentena_expected_prev[1] !== 1'bx ) && ( saidaCentena_prev[1] !== saidaCentena_expected_prev[1] )
		&& ((saidaCentena_expected_prev[1] !== last_saidaCentena_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaCentena[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaCentena_expected_prev);
		$display ("     Real value = %b", saidaCentena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaCentena_exp[1] = saidaCentena_expected_prev[1];
	end
	if (
		( saidaCentena_expected_prev[2] !== 1'bx ) && ( saidaCentena_prev[2] !== saidaCentena_expected_prev[2] )
		&& ((saidaCentena_expected_prev[2] !== last_saidaCentena_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaCentena[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaCentena_expected_prev);
		$display ("     Real value = %b", saidaCentena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaCentena_exp[2] = saidaCentena_expected_prev[2];
	end
	if (
		( saidaCentena_expected_prev[3] !== 1'bx ) && ( saidaCentena_prev[3] !== saidaCentena_expected_prev[3] )
		&& ((saidaCentena_expected_prev[3] !== last_saidaCentena_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaCentena[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaCentena_expected_prev);
		$display ("     Real value = %b", saidaCentena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaCentena_exp[3] = saidaCentena_expected_prev[3];
	end
	if (
		( saidaCentena_expected_prev[4] !== 1'bx ) && ( saidaCentena_prev[4] !== saidaCentena_expected_prev[4] )
		&& ((saidaCentena_expected_prev[4] !== last_saidaCentena_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaCentena[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaCentena_expected_prev);
		$display ("     Real value = %b", saidaCentena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaCentena_exp[4] = saidaCentena_expected_prev[4];
	end
	if (
		( saidaCentena_expected_prev[5] !== 1'bx ) && ( saidaCentena_prev[5] !== saidaCentena_expected_prev[5] )
		&& ((saidaCentena_expected_prev[5] !== last_saidaCentena_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaCentena[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaCentena_expected_prev);
		$display ("     Real value = %b", saidaCentena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaCentena_exp[5] = saidaCentena_expected_prev[5];
	end
	if (
		( saidaCentena_expected_prev[6] !== 1'bx ) && ( saidaCentena_prev[6] !== saidaCentena_expected_prev[6] )
		&& ((saidaCentena_expected_prev[6] !== last_saidaCentena_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaCentena[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaCentena_expected_prev);
		$display ("     Real value = %b", saidaCentena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_saidaCentena_exp[6] = saidaCentena_expected_prev[6];
	end
	if (
		( saidaDezena_expected_prev[0] !== 1'bx ) && ( saidaDezena_prev[0] !== saidaDezena_expected_prev[0] )
		&& ((saidaDezena_expected_prev[0] !== last_saidaDezena_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezena[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezena_expected_prev);
		$display ("     Real value = %b", saidaDezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saidaDezena_exp[0] = saidaDezena_expected_prev[0];
	end
	if (
		( saidaDezena_expected_prev[1] !== 1'bx ) && ( saidaDezena_prev[1] !== saidaDezena_expected_prev[1] )
		&& ((saidaDezena_expected_prev[1] !== last_saidaDezena_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezena[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezena_expected_prev);
		$display ("     Real value = %b", saidaDezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saidaDezena_exp[1] = saidaDezena_expected_prev[1];
	end
	if (
		( saidaDezena_expected_prev[2] !== 1'bx ) && ( saidaDezena_prev[2] !== saidaDezena_expected_prev[2] )
		&& ((saidaDezena_expected_prev[2] !== last_saidaDezena_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezena[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezena_expected_prev);
		$display ("     Real value = %b", saidaDezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saidaDezena_exp[2] = saidaDezena_expected_prev[2];
	end
	if (
		( saidaDezena_expected_prev[3] !== 1'bx ) && ( saidaDezena_prev[3] !== saidaDezena_expected_prev[3] )
		&& ((saidaDezena_expected_prev[3] !== last_saidaDezena_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezena[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezena_expected_prev);
		$display ("     Real value = %b", saidaDezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saidaDezena_exp[3] = saidaDezena_expected_prev[3];
	end
	if (
		( saidaDezena_expected_prev[4] !== 1'bx ) && ( saidaDezena_prev[4] !== saidaDezena_expected_prev[4] )
		&& ((saidaDezena_expected_prev[4] !== last_saidaDezena_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezena[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezena_expected_prev);
		$display ("     Real value = %b", saidaDezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saidaDezena_exp[4] = saidaDezena_expected_prev[4];
	end
	if (
		( saidaDezena_expected_prev[5] !== 1'bx ) && ( saidaDezena_prev[5] !== saidaDezena_expected_prev[5] )
		&& ((saidaDezena_expected_prev[5] !== last_saidaDezena_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezena[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezena_expected_prev);
		$display ("     Real value = %b", saidaDezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saidaDezena_exp[5] = saidaDezena_expected_prev[5];
	end
	if (
		( saidaDezena_expected_prev[6] !== 1'bx ) && ( saidaDezena_prev[6] !== saidaDezena_expected_prev[6] )
		&& ((saidaDezena_expected_prev[6] !== last_saidaDezena_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezena[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezena_expected_prev);
		$display ("     Real value = %b", saidaDezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_saidaDezena_exp[6] = saidaDezena_expected_prev[6];
	end
	if (
		( saidaDezenaOpcode_expected_prev[0] !== 1'bx ) && ( saidaDezenaOpcode_prev[0] !== saidaDezenaOpcode_expected_prev[0] )
		&& ((saidaDezenaOpcode_expected_prev[0] !== last_saidaDezenaOpcode_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezenaOpcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezenaOpcode_expected_prev);
		$display ("     Real value = %b", saidaDezenaOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saidaDezenaOpcode_exp[0] = saidaDezenaOpcode_expected_prev[0];
	end
	if (
		( saidaDezenaOpcode_expected_prev[1] !== 1'bx ) && ( saidaDezenaOpcode_prev[1] !== saidaDezenaOpcode_expected_prev[1] )
		&& ((saidaDezenaOpcode_expected_prev[1] !== last_saidaDezenaOpcode_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezenaOpcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezenaOpcode_expected_prev);
		$display ("     Real value = %b", saidaDezenaOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saidaDezenaOpcode_exp[1] = saidaDezenaOpcode_expected_prev[1];
	end
	if (
		( saidaDezenaOpcode_expected_prev[2] !== 1'bx ) && ( saidaDezenaOpcode_prev[2] !== saidaDezenaOpcode_expected_prev[2] )
		&& ((saidaDezenaOpcode_expected_prev[2] !== last_saidaDezenaOpcode_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezenaOpcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezenaOpcode_expected_prev);
		$display ("     Real value = %b", saidaDezenaOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saidaDezenaOpcode_exp[2] = saidaDezenaOpcode_expected_prev[2];
	end
	if (
		( saidaDezenaOpcode_expected_prev[3] !== 1'bx ) && ( saidaDezenaOpcode_prev[3] !== saidaDezenaOpcode_expected_prev[3] )
		&& ((saidaDezenaOpcode_expected_prev[3] !== last_saidaDezenaOpcode_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezenaOpcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezenaOpcode_expected_prev);
		$display ("     Real value = %b", saidaDezenaOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saidaDezenaOpcode_exp[3] = saidaDezenaOpcode_expected_prev[3];
	end
	if (
		( saidaDezenaOpcode_expected_prev[4] !== 1'bx ) && ( saidaDezenaOpcode_prev[4] !== saidaDezenaOpcode_expected_prev[4] )
		&& ((saidaDezenaOpcode_expected_prev[4] !== last_saidaDezenaOpcode_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezenaOpcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezenaOpcode_expected_prev);
		$display ("     Real value = %b", saidaDezenaOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saidaDezenaOpcode_exp[4] = saidaDezenaOpcode_expected_prev[4];
	end
	if (
		( saidaDezenaOpcode_expected_prev[5] !== 1'bx ) && ( saidaDezenaOpcode_prev[5] !== saidaDezenaOpcode_expected_prev[5] )
		&& ((saidaDezenaOpcode_expected_prev[5] !== last_saidaDezenaOpcode_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezenaOpcode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezenaOpcode_expected_prev);
		$display ("     Real value = %b", saidaDezenaOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saidaDezenaOpcode_exp[5] = saidaDezenaOpcode_expected_prev[5];
	end
	if (
		( saidaDezenaOpcode_expected_prev[6] !== 1'bx ) && ( saidaDezenaOpcode_prev[6] !== saidaDezenaOpcode_expected_prev[6] )
		&& ((saidaDezenaOpcode_expected_prev[6] !== last_saidaDezenaOpcode_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaDezenaOpcode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaDezenaOpcode_expected_prev);
		$display ("     Real value = %b", saidaDezenaOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_saidaDezenaOpcode_exp[6] = saidaDezenaOpcode_expected_prev[6];
	end
	if (
		( saidaNegativo_expected_prev[0] !== 1'bx ) && ( saidaNegativo_prev[0] !== saidaNegativo_expected_prev[0] )
		&& ((saidaNegativo_expected_prev[0] !== last_saidaNegativo_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaNegativo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaNegativo_expected_prev);
		$display ("     Real value = %b", saidaNegativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saidaNegativo_exp[0] = saidaNegativo_expected_prev[0];
	end
	if (
		( saidaNegativo_expected_prev[1] !== 1'bx ) && ( saidaNegativo_prev[1] !== saidaNegativo_expected_prev[1] )
		&& ((saidaNegativo_expected_prev[1] !== last_saidaNegativo_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaNegativo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaNegativo_expected_prev);
		$display ("     Real value = %b", saidaNegativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saidaNegativo_exp[1] = saidaNegativo_expected_prev[1];
	end
	if (
		( saidaNegativo_expected_prev[2] !== 1'bx ) && ( saidaNegativo_prev[2] !== saidaNegativo_expected_prev[2] )
		&& ((saidaNegativo_expected_prev[2] !== last_saidaNegativo_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaNegativo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaNegativo_expected_prev);
		$display ("     Real value = %b", saidaNegativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saidaNegativo_exp[2] = saidaNegativo_expected_prev[2];
	end
	if (
		( saidaNegativo_expected_prev[3] !== 1'bx ) && ( saidaNegativo_prev[3] !== saidaNegativo_expected_prev[3] )
		&& ((saidaNegativo_expected_prev[3] !== last_saidaNegativo_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaNegativo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaNegativo_expected_prev);
		$display ("     Real value = %b", saidaNegativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saidaNegativo_exp[3] = saidaNegativo_expected_prev[3];
	end
	if (
		( saidaNegativo_expected_prev[4] !== 1'bx ) && ( saidaNegativo_prev[4] !== saidaNegativo_expected_prev[4] )
		&& ((saidaNegativo_expected_prev[4] !== last_saidaNegativo_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaNegativo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaNegativo_expected_prev);
		$display ("     Real value = %b", saidaNegativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saidaNegativo_exp[4] = saidaNegativo_expected_prev[4];
	end
	if (
		( saidaNegativo_expected_prev[5] !== 1'bx ) && ( saidaNegativo_prev[5] !== saidaNegativo_expected_prev[5] )
		&& ((saidaNegativo_expected_prev[5] !== last_saidaNegativo_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaNegativo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaNegativo_expected_prev);
		$display ("     Real value = %b", saidaNegativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saidaNegativo_exp[5] = saidaNegativo_expected_prev[5];
	end
	if (
		( saidaNegativo_expected_prev[6] !== 1'bx ) && ( saidaNegativo_prev[6] !== saidaNegativo_expected_prev[6] )
		&& ((saidaNegativo_expected_prev[6] !== last_saidaNegativo_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaNegativo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaNegativo_expected_prev);
		$display ("     Real value = %b", saidaNegativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_saidaNegativo_exp[6] = saidaNegativo_expected_prev[6];
	end
	if (
		( saidaUnidade_expected_prev[0] !== 1'bx ) && ( saidaUnidade_prev[0] !== saidaUnidade_expected_prev[0] )
		&& ((saidaUnidade_expected_prev[0] !== last_saidaUnidade_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidade[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidade_expected_prev);
		$display ("     Real value = %b", saidaUnidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_saidaUnidade_exp[0] = saidaUnidade_expected_prev[0];
	end
	if (
		( saidaUnidade_expected_prev[1] !== 1'bx ) && ( saidaUnidade_prev[1] !== saidaUnidade_expected_prev[1] )
		&& ((saidaUnidade_expected_prev[1] !== last_saidaUnidade_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidade[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidade_expected_prev);
		$display ("     Real value = %b", saidaUnidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_saidaUnidade_exp[1] = saidaUnidade_expected_prev[1];
	end
	if (
		( saidaUnidade_expected_prev[2] !== 1'bx ) && ( saidaUnidade_prev[2] !== saidaUnidade_expected_prev[2] )
		&& ((saidaUnidade_expected_prev[2] !== last_saidaUnidade_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidade[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidade_expected_prev);
		$display ("     Real value = %b", saidaUnidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_saidaUnidade_exp[2] = saidaUnidade_expected_prev[2];
	end
	if (
		( saidaUnidade_expected_prev[3] !== 1'bx ) && ( saidaUnidade_prev[3] !== saidaUnidade_expected_prev[3] )
		&& ((saidaUnidade_expected_prev[3] !== last_saidaUnidade_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidade[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidade_expected_prev);
		$display ("     Real value = %b", saidaUnidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_saidaUnidade_exp[3] = saidaUnidade_expected_prev[3];
	end
	if (
		( saidaUnidade_expected_prev[4] !== 1'bx ) && ( saidaUnidade_prev[4] !== saidaUnidade_expected_prev[4] )
		&& ((saidaUnidade_expected_prev[4] !== last_saidaUnidade_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidade[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidade_expected_prev);
		$display ("     Real value = %b", saidaUnidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_saidaUnidade_exp[4] = saidaUnidade_expected_prev[4];
	end
	if (
		( saidaUnidade_expected_prev[5] !== 1'bx ) && ( saidaUnidade_prev[5] !== saidaUnidade_expected_prev[5] )
		&& ((saidaUnidade_expected_prev[5] !== last_saidaUnidade_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidade[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidade_expected_prev);
		$display ("     Real value = %b", saidaUnidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_saidaUnidade_exp[5] = saidaUnidade_expected_prev[5];
	end
	if (
		( saidaUnidade_expected_prev[6] !== 1'bx ) && ( saidaUnidade_prev[6] !== saidaUnidade_expected_prev[6] )
		&& ((saidaUnidade_expected_prev[6] !== last_saidaUnidade_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidade[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidade_expected_prev);
		$display ("     Real value = %b", saidaUnidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_saidaUnidade_exp[6] = saidaUnidade_expected_prev[6];
	end
	if (
		( saidaUnidadeOpcode_expected_prev[0] !== 1'bx ) && ( saidaUnidadeOpcode_prev[0] !== saidaUnidadeOpcode_expected_prev[0] )
		&& ((saidaUnidadeOpcode_expected_prev[0] !== last_saidaUnidadeOpcode_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidadeOpcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidadeOpcode_expected_prev);
		$display ("     Real value = %b", saidaUnidadeOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_saidaUnidadeOpcode_exp[0] = saidaUnidadeOpcode_expected_prev[0];
	end
	if (
		( saidaUnidadeOpcode_expected_prev[1] !== 1'bx ) && ( saidaUnidadeOpcode_prev[1] !== saidaUnidadeOpcode_expected_prev[1] )
		&& ((saidaUnidadeOpcode_expected_prev[1] !== last_saidaUnidadeOpcode_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidadeOpcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidadeOpcode_expected_prev);
		$display ("     Real value = %b", saidaUnidadeOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_saidaUnidadeOpcode_exp[1] = saidaUnidadeOpcode_expected_prev[1];
	end
	if (
		( saidaUnidadeOpcode_expected_prev[2] !== 1'bx ) && ( saidaUnidadeOpcode_prev[2] !== saidaUnidadeOpcode_expected_prev[2] )
		&& ((saidaUnidadeOpcode_expected_prev[2] !== last_saidaUnidadeOpcode_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidadeOpcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidadeOpcode_expected_prev);
		$display ("     Real value = %b", saidaUnidadeOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_saidaUnidadeOpcode_exp[2] = saidaUnidadeOpcode_expected_prev[2];
	end
	if (
		( saidaUnidadeOpcode_expected_prev[3] !== 1'bx ) && ( saidaUnidadeOpcode_prev[3] !== saidaUnidadeOpcode_expected_prev[3] )
		&& ((saidaUnidadeOpcode_expected_prev[3] !== last_saidaUnidadeOpcode_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidadeOpcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidadeOpcode_expected_prev);
		$display ("     Real value = %b", saidaUnidadeOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_saidaUnidadeOpcode_exp[3] = saidaUnidadeOpcode_expected_prev[3];
	end
	if (
		( saidaUnidadeOpcode_expected_prev[4] !== 1'bx ) && ( saidaUnidadeOpcode_prev[4] !== saidaUnidadeOpcode_expected_prev[4] )
		&& ((saidaUnidadeOpcode_expected_prev[4] !== last_saidaUnidadeOpcode_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidadeOpcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidadeOpcode_expected_prev);
		$display ("     Real value = %b", saidaUnidadeOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_saidaUnidadeOpcode_exp[4] = saidaUnidadeOpcode_expected_prev[4];
	end
	if (
		( saidaUnidadeOpcode_expected_prev[5] !== 1'bx ) && ( saidaUnidadeOpcode_prev[5] !== saidaUnidadeOpcode_expected_prev[5] )
		&& ((saidaUnidadeOpcode_expected_prev[5] !== last_saidaUnidadeOpcode_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidadeOpcode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidadeOpcode_expected_prev);
		$display ("     Real value = %b", saidaUnidadeOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_saidaUnidadeOpcode_exp[5] = saidaUnidadeOpcode_expected_prev[5];
	end
	if (
		( saidaUnidadeOpcode_expected_prev[6] !== 1'bx ) && ( saidaUnidadeOpcode_prev[6] !== saidaUnidadeOpcode_expected_prev[6] )
		&& ((saidaUnidadeOpcode_expected_prev[6] !== last_saidaUnidadeOpcode_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaUnidadeOpcode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaUnidadeOpcode_expected_prev);
		$display ("     Real value = %b", saidaUnidadeOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_saidaUnidadeOpcode_exp[6] = saidaUnidadeOpcode_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sistemaComputacional_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock50;
reg enter;
reg [8:0] entradaSwitch;
reg reset;
// wires                                               
wire [31:0] dadoEscritaNovo;
wire [31:0] dadoRd;
wire [31:0] dadoRs;
wire [31:0] imediatoExtendido22;
wire [4:0] opcode;
wire [4:0] rd;
wire [6:0] saidaCentena;
wire [6:0] saidaDezena;
wire [6:0] saidaDezenaOpcode;
wire [6:0] saidaNegativo;
wire [6:0] saidaUnidade;
wire [6:0] saidaUnidadeOpcode;

wire sampler;                             

// assign statements (if any)                          
sistemaComputacional i1 (
// port map - connection between master ports and signals/registers   
	.clock50(clock50),
	.dadoEscritaNovo(dadoEscritaNovo),
	.dadoRd(dadoRd),
	.dadoRs(dadoRs),
	.enter(enter),
	.entradaSwitch(entradaSwitch),
	.imediatoExtendido22(imediatoExtendido22),
	.opcode(opcode),
	.rd(rd),
	.reset(reset),
	.saidaCentena(saidaCentena),
	.saidaDezena(saidaDezena),
	.saidaDezenaOpcode(saidaDezenaOpcode),
	.saidaNegativo(saidaNegativo),
	.saidaUnidade(saidaUnidade),
	.saidaUnidadeOpcode(saidaUnidadeOpcode)
);

// clock50
always
begin
	clock50 = 1'b0;
	clock50 = #2500 1'b1;
	#2500;
end 

// enter
initial
begin
	enter = 1'b0;
	enter = #70000 1'b1;
	enter = #20000 1'b0;
	enter = #80000 1'b1;
	enter = #20000 1'b0;
end 
// entradaSwitch[ 8 ]
initial
begin
	entradaSwitch[8] = 1'b0;
end 
// entradaSwitch[ 7 ]
initial
begin
	entradaSwitch[7] = 1'b0;
end 
// entradaSwitch[ 6 ]
initial
begin
	entradaSwitch[6] = 1'b0;
end 
// entradaSwitch[ 5 ]
initial
begin
	entradaSwitch[5] = 1'b0;
end 
// entradaSwitch[ 4 ]
initial
begin
	entradaSwitch[4] = 1'b0;
end 
// entradaSwitch[ 3 ]
initial
begin
	entradaSwitch[3] = 1'b0;
end 
// entradaSwitch[ 2 ]
initial
begin
	entradaSwitch[2] = 1'b0;
	entradaSwitch[2] = #160000 1'b1;
	entradaSwitch[2] = #40000 1'b0;
end 
// entradaSwitch[ 1 ]
initial
begin
	entradaSwitch[1] = 1'b0;
	entradaSwitch[1] = #60000 1'b1;
	entradaSwitch[1] = #40000 1'b0;
end 
// entradaSwitch[ 0 ]
initial
begin
	entradaSwitch[0] = 1'b0;
	entradaSwitch[0] = #60000 1'b1;
	entradaSwitch[0] = #40000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

sistemaComputacional_vlg_sample_tst tb_sample (
	.clock50(clock50),
	.enter(enter),
	.entradaSwitch(entradaSwitch),
	.reset(reset),
	.sampler_tx(sampler)
);

sistemaComputacional_vlg_check_tst tb_out(
	.dadoEscritaNovo(dadoEscritaNovo),
	.dadoRd(dadoRd),
	.dadoRs(dadoRs),
	.imediatoExtendido22(imediatoExtendido22),
	.opcode(opcode),
	.rd(rd),
	.saidaCentena(saidaCentena),
	.saidaDezena(saidaDezena),
	.saidaDezenaOpcode(saidaDezenaOpcode),
	.saidaNegativo(saidaNegativo),
	.saidaUnidade(saidaUnidade),
	.saidaUnidadeOpcode(saidaUnidadeOpcode),
	.sampler_rx(sampler)
);
endmodule

